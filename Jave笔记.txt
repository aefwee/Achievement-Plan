什么是多态
所谓多态：就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。

多态就是同一个接口，使用不同的实例而执行不同操作。
多态的实现条件
多态的三个条件:

继承的存在(继承是多态的基础，没有继承就没有多态)；

子类重写父类的方法(多态下调用子类重写的方法)；

父类引用变量指向子类对象(子类到父类的类型转换)。

子类转换成父类时的规则:

将一个父类的引用指向一个子类的对象，称为向上转型(upcasting)，自动进行类型转换。此时通过父类引用调用的方法是子类覆盖或继承父类的方法，不是父类的方法。 此时通过父类引用变量无法调用子类特有的方法；

如果父类要调用子类的特有方法就得将一个指向子类对象的父类引用赋给一个子类的引用，称为向下转型，此时必须进行强制类型转换。
public class TestAnimalDemo {
    public static void main(String[] args) {
        show(new Cat()); // 以 Cat 对象调用 show 方法
        show(new Dog()); // 以 Dog 对象调用 show 方法
        Animal a = new Cat(); // 向上转型
        a.eat(); // 调用的是 Cat 的 eat
        Cat c = (Cat) a; // 向下转型
        c.work(); // 调用的是 Cat 的 work
    }
    public static void show(Animal a) {
        a.eat();
        // 类型判断
        if (a instanceof Cat) { // 猫做的事情
            Cat c = (Cat) a;
            c.work();
        } else if (a instanceof Dog) { // 狗做的事情
            Dog c = (Dog) a;
            c.work();
        }
    }
}
abstract class Animal {
    abstract void eat();
}
class Cat extends Animal {
    public void eat() {
        System.out.println("吃鱼");
    }
    public void work() {
        System.out.println("抓老鼠");
    }
}
class Dog extends Animal {
    public void eat() {
        System.out.println("吃骨头");
    }
    public void work() {
        System.out.println("看家");
    }
}
输出结果：

吃鱼

抓老鼠

吃骨头

看家

吃鱼

抓老鼠

可以用 instanceof 判断一个类是否实现了某个接口，也可以用它来判断一个实例对象是否属于一个类。instanceof 的语法格式为:

对象 instanceof 类(或接口)
它的返回值是布尔型的，或真(true)、或假(false)。

多态的实现形式
在Java中有两种形式可以实现多态：继承和接口。

基于继承实现的多态
基于继承的实现机制主要表现在父类和继承该父类的一个或多个子类对某些方法的重写，多个子类对同一方法的重写可以表现出不同的行为。

基于继承实现的多态可以总结如下：对于引用子类的父类类型，在处理该引用时，它适用于继承该父类的所有子类，子类对象的不同，对方法的实现也就不同，执行相同动作产生的行为也就不同。

如果父类是抽象类，那么子类必须要实现父类中所有的抽象方法，这样该父类所有的子类一定存在统一的对外接口，但其内部的具体实现可以各异。这样我们就可以使用顶层类提供的统一接口来处理该层次的方法。

基于接口实现的多态
继承是通过重写父类的同一方法的几个不同子类来体现的，那么就可能是通过实现接口并覆盖接口中同一方法的几不同的类体现的。

在接口的多态中，指向接口的引用必须是指定实现了该接口的一个类的实例程序，在运行时，根据对象引用的实际类型来执行对应的方法。

继承都是单继承，只能为一组相关的类提供一致的服务接口。但是接口可以是多继承多实现，它能够利用一组相关或者不相关的接口进行组合与扩充，能够对外提供一致的服务接口。所以它相对于继承来说有更好的灵活性。

split方法
在处理字符串的时候我们经常需要将他们切割，然后分别处理，比如我们有一个字符串：张三，李四，王五，赵六，现在我们想要将他们的名字拆分出来，变成一个单独的字符串，如何做呢？

很简单使用split方法即可。

String str = "张三，李四，王五，赵六";
String[] names = str.split("，");
for (int i = 0; i < names.length; i++) {
    System.out.println(names[i]);
}
输出：

张三

李四

王五

赵六

StringBuffer类
StringBuffer类和String类一样，也用来代表字符串，只是由于StringBuffer的内部实现方式和String不同，StringBuffer在进行字符串处理时，不生成新的对象，所以在内存使用上，StringBuffer类要优于String类。

StringBuffer类中存在很多和String类一样的方法，这些方法在功能上是完全一样的。

StringBuffer类中也有一些独特的方法，用于帮助我们更方便的实现某些功能。

StringBuffer类的对象的初始化
通常情况下使用构造方法对其进行初始化：

StringBuffer stringBuffer = new StringBuffer();
这样初始化出的StringBuffer对象是一个空的对象。

如果需要创建带有内容的StringBuffer对象，则可以使用：

StringBuffer stringBuffer = new StringBuffer("Hello World!");
这样初始化出的StringBuffer对象的内容就是字符串"Hello World!"。

append()方法
append()方法的作用是追加内容到当前StringBuffer对象的末尾，类似于字符串的连接，请看示例：

StringBuffer stringBuffer = new StringBuffer("Hello");
stringBuffer.append("World!");
System.out.println(stringBuffer);
执行以上代码，结果为：

HelloWorld!
reverse()方法
reverse()方法将把当前字符序列反转后返回，请看示例：

StringBuffer stringBuffer = new StringBuffer("abc");
System.out.println(stringBuffer.reverse());
执行以上代码，结果为：

cba
StringBuffer对象和String对象互转
注意，StringBuffer和String属于不同的类型，也不能直接进行强制类型转换，下面的代码都是错误的：

StringBuffer s = "abc";  //赋值类型不匹配
StringBuffer s = (StringBuffer)"abc";  //不存在继承关系，无法进行强转
正确的对象之间互转代码如下：

String string1 = "Hello World!";
StringBuffer stringBuffer = new StringBuffer(string1);  //String转换为StringBuffer
String string2 = stringBuffer.toString();  //StringBuffer转换为String

Math类
Math类是一个工具类，它的构造器被定义成private的，因此无法创造Math类的对象。Math类中所有的方法都是类方法，可以直接通过类名来调用他们。

Math类包含完成基本数学函数所需的方法。这些方法基本可以分为三类：三角函数方法、指数函数方法和服务方法。在Math类中定义了PI和E两个double型常量，PI就是π的值，而E即e指数底的值，分别是：3.141592653589793和2.718281828459045。

Math类中常用方法
三角函数方法；
Math类包含下面的三角函数方法：

Math.toDegrees

这个方法是将-π/2到π/2之间的弧度值转化为度，例如：Math.toDegrees(Math.PI/2)结果为90.0；

Math.toRadians

这个方法是将度转化为-π/2到π/2之间的弧度值，例如：Math.toRadians(30)结果为π/6；

Math.sin、Math.cos、Math.tan这三个方法是三角函数中的正弦、余弦和正切，反之Math.asin、Math.acos、Math.atan是他们的反函数。
指数函数方法；
Math类中有五个与指数函数相关的方法Math.exp(a)方法主要是获得以 e 为底 a 为指数的数值；Math.log()和Math.log10()是对数函数；Math.pow(a,b)是以a为底b为指数的值；Math.sqrt()是开根号。

取整方法；
Math类里包含五个取整方法：Math.ceil()方法是往大里取值；Math.floor()方法是往小里取值；Math.rint()方法返回与参数最接近的整数，返回类型为double，注意.5的时候会取偶数；Math.round()方法分两种：int型和long型，Math.round(a)就是Math.floor(a+0.5)，即将原来的数字加上0.5后再向下取整，所以，Math.round(11.5)的结果为12，Math.round(-11.5)的结果为-11。

min、max和abs方法
取最大值和最小值以及绝对值。

random方法。


