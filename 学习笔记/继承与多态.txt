一.继承
1.继承概述
继承是面向对象三大特征之一。可以使得子类具有父类的属性和方法，还可以在子类中重新定义，追加属性和方法。
继承的格式：public class 子类名 extends 父类名{ }
范例：public class Zi extends Fu { }
Fu：是父类，也称为基类、超类。
Zi：是子类，也称为派生类。
继承中子类的特点：
子类可以有父类的内容，子类还可以有自己特有的内容。
继承的好处：
提高了代码的复用性（多个类相同的的成员可以放到同一个类中）
提高了代码的维护性（如果方法的代码需要修改，修改一处即可）
继承弊端：
继承让类与类之间产生了关系, 类的耦合性增强了，当类发生变化时子类实现也不得不跟着变化,削弱了子类的独立性
什么时候使用继承?
●继承体现的关系: is a
●假设法:我有两个类A和B,如果他们满足A是B的一种,或者B是A的一种,就说明他们存在继承关系，这个时候就可以考虑使用继承来体现，否则就不能滥用继承
●举例: 苹果和水果,猫和动物，猫和狗

2.super关键字
super关键字的用法和this关键字的用法相似
this:代表本类对象的引用
super:代表父类存储空间的标识（可以理解为父类对象引用）

关键字	访问成员变量	访问构造方法	访问成员方法
this	this.成员变量，访问本类成员变量	this(..)，访问本类构造方法	this.成员方法(..)，访问本类成员方法
super	super.成员变量，访问父类成员变量	super(..)，访问父类构造方法	super.成员方法(..)，访问父类成员方法
3.继承中构造方法的访问特点
子类中所有的构造方法默认都会访父类中无参的构造方法
为什么呢?
●因为子类会继承父类中的数据,可还会用父类的数据。所以，初始化之前，一 定要先完成父类数据的初始化
●每一个子类构造方法的第一语句默认都是: super()
如果父类中没有无参构造方法，只有带参构造方法，怎么办呢?
●通过使用super关键字去显示的调用父类的带参构造方法
●在父类中自己提供 一个无参构造方法
推荐:自己给出无参构造方法

4.方法重写
方法重写概述
●子类中出现了和父类中一模一样的方法声明
方法重写的应用
●当子类需要父类的功能， 而功能主体子类有自己特有内容时,可以重写父类中的方法，这样，即沿袭了父类
的功能，又定义了子类特有的内容
●练习: 手机类和新手机类
@Override
●是一个注解(注解后面会学习到)
●可以帮助我们检查重写方法的方法声明的正确性
方法重写的注意事项：
私有方法不能被重写（父类私有成员子类是不能继承的）
子类方法访问权限不能更低（public > 默认 > 私有）

5.Java中继承的注意事项
Java中类只支持单继承，不支持多继承。
例如：
public class Son extends Father,Mother{ }
是错误的。
Java中类支持多层继承。

6.package
包的概述和使用：
包其实就是文件夹，作用：对类进行分类管理。
包的定义格式：
package 包名; (多级包用 . 分开)
范例：package com.itheima;
带包的Java类编译和执行
手动建包:
按照以前的格式编译java文件:
javac HelloWorld.java
手动创建包：
在E盘建立文件夹com,然后在com下建立文件夹itheima
把class文件放到包的最里面：
把HelloWorld.class文件放到com下的itheima这个文件夹下
带包执行：
java com.itheima.HelloWorld
自动建包：
javac -d . HelloWorld.java java com.itheima.HelloWorld

7.import
导包的概述和使用:
使用不同包下的类时,佣的时候要写类的全路径，写起来太麻烦了，为了简化带包的操作，Java就提供了导包的功能
包的格式：
格式: import 包名;
范例: import cn.itcast.Teacher

8.权限修饰符
同一个类中 可以访问的修饰符：private ；默认 ；protected ；public
同一个包中子类无关类：默认 ；protected ；public
不同包的子类：protected ；public
不同包的无关类：public
final修饰局部变量
变量是基本类型: final修饰指的是基本类型的数据值不能发生改变
变量是引用类型: final 修饰指的是引用类型的地址值不能发生改变,但是地址里面的内容是可以发生改变的
static
static关键字是静态的意思，可以修饰成员方法,成员变量
static修饰的特点：
●被类的所有对象共享
这也是我们判断是否使使用静态关键字的条件
●可以通过类名调用
当然，也可以通过对象名调用
推荐使用类名调用
static访问特点：
非静态的成员方法
●能访问静态的成员变量
●能访问非静态的成员变量
●能访问静态的成员方法
●能访问非静态的成员方法

静态的成员方法
●能访问静态的成员量
●能访问静态的成员方法
总结成一句话就是:静态成员方法只能访问静态成员

二.多态
1.多态概述
同一个对象，在不同时刻表现出来的不同形态
举例:猫
我们可以说猫是猫: 猫 cat = new 猫();
我们也可以说猫是动物: 动物 animal = new 猫();
这里猫在不同的时刻表现出来了不同的形态，这就是多态
多态的前提和体现
●有继承/实现关系
●有方法重写
●有父类引用指向子类对象
多态中的转型：
（1）向上转型：从子到父；父类引用指向子类对象
（2）向下转型：从父到子；父类引用转为子类对象

2.多态中成员访问特点
成员变量:编译看左边，执行看左边
成员方法:编译看左边，执行看右边
为什么成员变和成员方法的访问不样呢?
●因为成员方法有重写,而成员变量没有

3.多态的好处和弊端
●多态的好处: 提高了程序的扩展性
具体体现:定义方法的时候,使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作
●多态的弊端: 不能使用子类的特有功能

4.抽象类
在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。
（1）抽象类的特点
●抽象类和抽象方法必须使用 abstract关键字修饰
public abstract class 类名{
public abstract void eat0;
●抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类
●抽象类不能实例化
抽象类如何实例化呢?参照多态的方式，通过子对象实例化，这叫抽像类多态
●抽象类的子类
要么重写抽象类中的所有抽象方法；要么是抽象类
（2）抽象类的成员特点
●成员变量
可以是变量
可以是常量
●构造方法
有构造方法，但是不能实例化
那么，构造方法的作用是什么呢?用于子类访问父类数据的初始化
成员方法
可以有抽象方法:限定子必须完成某些动作
也可以有非抽象方法:提高代码复用性

三.接口
1.接口概述
接口是一种公共的规范标准，只要符合规范标准，大家都可以通用
Java的接口更多的体现在对行为的抽象。

2.接口的特点
接口用关键字 interface 修饰
public interface 接口名 {}
●类实现接口用 implements 表示
public class 类名 implements 接口名 {}
●接口不能实例化
接口如何实例化呢?参照多态的方式，通过实现类对象实例化，这叫接口多态。
多态的形式:具体类多态，抽象类多态，接口多态。
多态的前提:有继承或者实现关系;有方法重写;有父(类/接口)引用指向(子/实现)类对象
●接口的实现类
要么重写接口中的所有抽象方法
要么是抽象类

3.接口的成员特点
●成员量
只能是常量
默认修饰符: public static final
●构造方法
接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在
一个类如果没有父类,默认继承自 Objec 类
●成员方法
只能是抽象方法
默认修饰符: public abstract